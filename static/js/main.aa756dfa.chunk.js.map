{"version":3,"sources":["store/reducers/TodosReducer/types.ts","store/reducers/TodosReducer/todosReducer.ts","store/reducers/UserReducer/types.ts","store/reducers/UserReducer/userReducer.ts","components/TodoList/TodoList.tsx","store/reducers/index.ts","store/index.ts","hooks/useTypeSelector.ts","api/api.ts","store/action-creators/user.ts","store/action-creators/todo.ts","store/action-creators/index.ts","hooks/useActions.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodosActionTypes","UserActionTypes","initialState","todos","loading","error","selectedUserId","statusTodos","SortBy","user","rootReducer","combineReducers","state","action","type","FETCH_USER","FETCH_USER_SUCCESS","payload","FETCH_USER_ERROR","RESET_USER","FETCH_TODOS","TOGGLE_STATUS_TODO","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROR","TOGGLE_STATUS_TODO_ERROR","SELECT_USER","DESELECT_USER","SET_STATUS_TODOS","TOGGLE_STATUS_TODO_SUCCESS","map","todo","id","store","createStore","composeWithDevTools","applyMiddleware","thunk","useTypedSelector","useSelector","API_URL","getTodos","a","complete","url","fetch","response","json","getUser","userId","status","Error","toggleTodo","method","headers","body","JSON","stringify","completed","fetchUser","dispatch","fetchTodos","toggleStatusTodo","TodosActionCreators","UserActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","TodoList","useState","query","setQuery","useEffect","queryForFilter","shuffle","array","copy","i","length","j","Math","floor","random","filteredTodos","filter","lowerCaseQuery","toLowerCase","title","includes","className","htmlFor","placeholder","value","onChange","event","target","default","true","false","onClick","classNames","checked","readOnly","CurrentUser","name","website","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"kZAQYA,E,+DAAAA,K,0BAAAA,E,0CAAAA,E,sCAAAA,E,0BAAAA,E,8BAAAA,E,oCAAAA,E,wCAAAA,E,wDAAAA,E,qDAAAA,M,KCNZ,ICFYC,EDENC,EAA2B,CAC/BC,MAAO,GACPC,SAAS,EACTC,MAAO,KACPC,eAAgB,KAChBC,YAAa,K,SCPHN,K,wBAAAA,E,wCAAAA,E,oCAAAA,E,yBAAAA,M,KCEZ,ICOKO,EDPCN,EAA0B,CAC9BO,KAAM,KACNL,SAAS,EACTC,MAAO,MEDIK,EAAcC,0BAAgB,CACzCF,KFGyB,WAA0D,IAAzDG,EAAwD,uDAAhDV,EAAcW,EAAkC,uCAClF,OAAQA,EAAOC,MACb,KAAKb,EAAgBc,WACnB,OAAO,2BACFH,GADL,IAEER,SAAS,IAGb,KAAKH,EAAgBe,mBACnB,OAAO,2BACFJ,GADL,IAEEH,KAAMI,EAAOI,QACbb,SAAS,IAGb,KAAKH,EAAgBiB,iBACnB,OAAO,2BACFN,GADL,IAEER,SAAS,EACTC,MAAOQ,EAAOI,UAGlB,KAAKhB,EAAgBkB,WACnB,OAAO,2BACFP,GADL,IAEEH,KAAM,OAGV,QACE,OAAOG,IE/BXT,MJI0B,WAA4D,IAA3DS,EAA0D,uDAAlDV,EAAcW,EAAoC,uCACrF,OAAQA,EAAOC,MACb,KAAKd,EAAiBoB,YACtB,KAAKpB,EAAiBqB,mBACpB,OAAO,2BACFT,GADL,IAEER,SAAS,IAGb,KAAKJ,EAAiBsB,oBACpB,OAAO,2BACFV,GADL,IAEER,SAAS,EACTD,MAAOU,EAAOI,UAGlB,KAAKjB,EAAiBuB,kBACtB,KAAKvB,EAAiBwB,yBACpB,OAAO,2BACFZ,GADL,IAEER,SAAS,EACTC,MAAOQ,EAAOI,UAGlB,KAAKjB,EAAiByB,YACpB,OAAO,2BACFb,GADL,IAEEN,eAAgBO,EAAOI,UAG3B,KAAKjB,EAAiB0B,cACpB,OAAO,2BACFd,GADL,IAEEN,eAAgB,OAGpB,KAAKN,EAAiB2B,iBACpB,OAAO,2BACFf,GADL,IAEEL,YAAaM,EAAOI,UAGxB,KAAKjB,EAAiB4B,2BACpB,OAAO,2BACFhB,GADL,IAEER,SAAS,EACTD,MAAOS,EAAMT,MAAM0B,KAAI,SAAAC,GACrB,OAAIA,EAAKC,KAAOlB,EAAOI,QAAQc,GACtBlB,EAAOI,QAGTa,OAIb,QACE,OAAOlB,MKxDEoB,EALDC,sBACZvB,EACAwB,8BAAoBC,0BAAgBC,O,sDCJzBC,EAAoDC,I,uBCH3DC,EAAU,qCAEHC,EAAQ,uCAAG,4CAAAC,EAAA,6DAAOC,EAAP,+BAAkB,GACpCC,EADkB,UACTJ,EADS,SAGL,KAAbG,IACFC,GAAG,qBAAkBD,IAJD,SAOCE,MAAMD,GAPP,cAOhBE,EAPgB,yBASfA,EAASC,QATM,2CAAH,qDAYRC,EAAO,uCAAG,4CAAAN,EAAA,6DAAOO,EAAP,+BAAgB,EACjCL,EADiB,UACRJ,EADQ,UAGN,IAAXS,IACFL,GAAG,UAAOK,IAJS,SAOEJ,MAAMD,GAPR,UASG,OAFlBE,EAPe,QASRI,OATQ,sBAUb,IAAIC,MAVS,gCAadL,EAASC,QAbK,2CAAH,qDAgBPK,EAAU,uCAAG,WAAOpB,EAAYkB,GAAnB,iBAAAR,EAAA,6DAClBE,EADkB,UACTJ,EADS,iBACOR,GADP,SAGDa,MAAMD,EAAK,CAChCS,OAAQ,QACRC,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAU,CAAEC,WAAYR,MARb,UAWA,OARlBJ,EAHkB,QAWXI,OAXW,sBAYhB,IAAIC,MAZY,gCAejBL,EAASC,QAfQ,2CAAH,wDCzBVY,EAAY,SAAC3B,GACxB,8CAAO,WAAO4B,GAAP,eAAAlB,EAAA,sEAEHkB,EAAS,CAAE7C,KAAMb,EAAgBc,aAF9B,SAGoBgC,EAAQhB,GAH5B,OAGGc,EAHH,OAKHc,EAAS,CAAE7C,KAAMb,EAAgBe,mBAAoBC,QAAS4B,IAL3D,gDAOHc,EAAS,CAAE7C,KAAMb,EAAgBiB,iBAAkBD,QAAS,wBAPzD,yDAAP,uDCDW2C,EAAa,WAAoB,IAAnBlB,EAAkB,uDAAP,GACpC,8CAAO,WAAOiB,GAAP,eAAAlB,EAAA,sEAEHkB,EAAS,CAAE7C,KAAMd,EAAiBoB,cAF/B,SAGoBoB,EAASE,GAH7B,OAGGG,EAHH,OAKHc,EAAS,CAAE7C,KAAMd,EAAiBsB,oBAAqBL,QAAS4B,IAL7D,gDAOHc,EAAS,CAAE7C,KAAMd,EAAiBuB,kBAAmBN,QAAS,yBAP3D,yDAAP,uDAYW4C,EAAmB,SAAC9B,EAAYkB,GAC3C,8CAAO,WAAOU,GAAP,eAAAlB,EAAA,sEAEHkB,EAAS,CAAE7C,KAAMd,EAAiBqB,qBAF/B,SAGoB8B,EAAWpB,EAAIkB,GAHnC,OAGGJ,EAHH,OAKHc,EAAS,CAAE7C,KAAMd,EAAiB4B,2BAA4BX,QAAS4B,IALpE,gDAOHc,EAAS,CAAE7C,KAAMd,EAAiBwB,yBAA0BP,QAAS,wBAPlE,yDAAP,uDChBa,6BACV6C,GACAC,GCDQC,EAAa,WACxB,IAAML,EAAWM,cAEjB,OAAOC,6BAAmBC,EAAgBR,I,yBREvCnD,K,YAAAA,E,cAAAA,E,YAAAA,M,KAME,IAAM4D,EAAqB,WAChC,IAAMT,EAAWM,cACjB,EAAyCD,IAAjCJ,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,iBAEpB,EAMIxB,GAAiB,SAAAzB,GAAK,OAAIA,EAAMT,SALlCA,EADF,EACEA,MACAE,EAFF,EAEEA,MACAD,EAHF,EAGEA,QACAE,EAJF,EAIEA,eACAC,EALF,EAKEA,YAGF,EAA0B8D,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRZ,EAAWrD,KACV,CAACA,IAEJ,IAAiDkE,EAQ3CC,EAAU,SAACC,GAGf,IAFA,IAAMC,EAAI,YAAOD,GAERE,EAAID,EAAKE,OAAS,EAAGD,EAAI,EAAGA,GAAK,EAAG,CAC3C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAGtB,CAACD,EAAKG,GAAIH,EAAKC,IAAnCD,EAAKC,GAHqC,KAGjCD,EAAKG,GAH4B,KAM7C,OAAOH,GAGHO,GApB2CV,EAoBHH,EAAPnE,EAnBhBiF,QAAO,SAAAtD,GAC1B,IAAMuD,EAAiBZ,EAAea,cAEtC,OAAOxD,EAAKyD,MAAMD,cAAcE,SAASH,OAkB7C,OAAIjF,EACK,4CAGLC,EACK,6BAAKA,IAIZ,sBAAKoF,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,wBAAf,UACE,wBAAOC,QAAQ,eAAeD,UAAU,QAAxC,4BAEE,uBACEA,UAAU,8BACV3E,KAAK,OACLiB,GAAG,eACH4D,YAAY,mBACZC,MAAOtB,EACPuB,SAAU,SAAAC,GAAK,OAAIvB,EAASuB,EAAMC,OAAOH,aAG7C,wBAAOF,QAAQ,mBAAf,yCAEE,yBACED,UAAU,8BACV1D,GAAG,mBACH6D,MAAOrF,EACPsF,SAAU,SAACC,GAAD,OAAWnC,EAAS,CAC5B7C,KAAMd,EAAiB2B,iBACvBV,QAAS6E,EAAMC,OAAOH,SAN1B,UASE,wBAAQA,MAAOpF,EAAOwF,QAAtB,iBACA,wBAAQJ,MAAOpF,EAAOyF,KAAtB,uBACA,wBAAQL,MAAOpF,EAAO0F,MAAtB,0BAIJ,oDAEE,wBACET,UAAU,+DACV3E,KAAK,SACLqF,QAAS,kBAAMxC,EAAS,CACtB7C,KAAMd,EAAiBsB,oBACvBL,QAASyD,EAAQvE,MALrB,6BAaJ,qBAAKsF,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGN,EAActD,KAAI,SAAAC,GAAI,OACrB,qBAEE2D,UAAWW,IAAW,iBACpB,CAAE,0BAA2BtE,EAAK2B,WAClC,CAAE,6BAA8B3B,EAAK2B,YAJzC,UAME,wBAAOiC,QAAQ,WAAf,UACE,uBACE3D,GAAG,WACHsE,QAASvE,EAAK2B,UACd3C,KAAK,WACLwF,UAAQ,EACRT,SAAU,kBAAMhC,EAAiB/B,EAAKC,GAAID,EAAK2B,cAEjD,4BAAI3B,EAAKyD,WAGX,yBACEY,QAAS,WACHrE,EAAKkB,SAAW1C,GAClBqD,EAAS,CAAE7C,KAAMd,EAAiByB,YAAaR,QAASa,EAAKkB,UAGjEyC,UAAWW,IAAW,+BACpB,CAAE,kCAAmCtE,EAAKkB,SAAW1C,IACvDQ,KAAK,SARP,sBAWGgB,EAAKkB,YA3BHlB,EAAKC,eSxGXwE,G,MAAwB,WACnC,IAAQjG,EAAmB+B,GAAiB,SAAAzB,GAAK,OAAIA,EAAMT,SAAnDG,eACR,EAAiC+B,GAAiB,SAAAzB,GAAK,OAAIA,EAAMH,QAAzDA,EAAR,EAAQA,KAAML,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MACjBsD,EAAWM,cACTP,EAAcM,IAAdN,UAERc,qBAAU,WACJlE,GACFoD,EAAUpD,KAEX,CAACA,IAOJ,OAAIF,EACK,4CAGLC,EACK,6BAAKA,IAGD,OAATI,EACK,oDAIP,sBAAKgF,UAAU,cAAf,UACE,wBACEU,QApBY,WAChBxC,EAAS,CAAE7C,KAAMd,EAAiB0B,gBAClCiC,EAAS,CAAE7C,KAAMb,EAAgBkB,cAmB7BsE,UAAU,iEAKV3E,KAAK,SAPP,mBAYA,oBAAI2E,UAAU,qBAAd,SACE,kDAEG,IACAhF,EAAKsB,QAIV,oBAAI0D,UAAU,oBAAd,SAAmChF,EAAK+F,OACxC,mBAAGf,UAAU,qBAAb,SAAmChF,EAAKgG,UACxC,mBAAGhB,UAAU,qBAAb,SAAmChF,EAAKiG,aCvC/BC,EAhBH,WACV,OACE,sBAAKlB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,cAAC,EAAD,YCRJmB,EAAO,kBACX,cAAC,IAAD,CAAU5E,MAAOA,EAAjB,SACE,cAAC,EAAD,OAIJ6E,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.aa756dfa.chunk.js","sourcesContent":["export interface TodosState {\n  todos: Todo[];\n  loading: boolean;\n  error: null | string;\n  selectedUserId: null | number;\n  statusTodos: string;\n}\n\nexport enum TodosActionTypes {\n  FETCH_TODOS = 'FETCH_TODOS',\n  FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS',\n  FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR',\n  SELECT_USER = 'SELECT_USER',\n  DESELECT_USER = 'DESELECT_USER',\n  SET_STATUS_TODOS = 'SET_STATUS_TODOS',\n  TOGGLE_STATUS_TODO = 'TOGGLE_STATUS_TODO',\n  TOGGLE_STATUS_TODO_SUCCESS = 'TOGGLE_STATUS_TODO_SUCCESS',\n  TOGGLE_STATUS_TODO_ERROR = 'TOGGLE_STATUS_TODO_ERROR',\n}\n\ninterface FetchTodosAction {\n  type: TodosActionTypes.FETCH_TODOS;\n}\n\ninterface FetchTodosSuccessAction {\n  type: TodosActionTypes.FETCH_TODOS_SUCCESS;\n  payload: Todo[];\n}\n\ninterface FetchTodosErrorAction {\n  type: TodosActionTypes.FETCH_TODOS_ERROR;\n  payload: string;\n}\n\ninterface SelectUserAction {\n  type: TodosActionTypes.SELECT_USER;\n  payload: number;\n}\n\ninterface DeselectUserAction {\n  type: TodosActionTypes.DESELECT_USER;\n}\n\ninterface SetStatusTodosAction {\n  type: TodosActionTypes.SET_STATUS_TODOS;\n  payload: string;\n}\n\ninterface ToggleStatusTodoAction {\n  type: TodosActionTypes.TOGGLE_STATUS_TODO;\n}\n\ninterface ToggleStatusTodoSuccessAction {\n  type: TodosActionTypes.TOGGLE_STATUS_TODO_SUCCESS;\n  payload: Todo;\n}\n\ninterface ToggleStatusTodoErrorAction {\n  type: TodosActionTypes.TOGGLE_STATUS_TODO_ERROR;\n  payload: string;\n}\n\nexport type TodosAction =\n  FetchTodosAction\n  | FetchTodosSuccessAction\n  | FetchTodosErrorAction\n  | SelectUserAction\n  | DeselectUserAction\n  | SetStatusTodosAction\n  | ToggleStatusTodoAction\n  | ToggleStatusTodoSuccessAction\n  | ToggleStatusTodoErrorAction;\n","import { TodosState, TodosActionTypes, TodosAction } from './types';\n\nconst initialState: TodosState = {\n  todos: [],\n  loading: false,\n  error: null,\n  selectedUserId: null,\n  statusTodos: '',\n};\n\nexport const todosReducer = (state = initialState, action: TodosAction): TodosState => {\n  switch (action.type) {\n    case TodosActionTypes.FETCH_TODOS:\n    case TodosActionTypes.TOGGLE_STATUS_TODO:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case TodosActionTypes.FETCH_TODOS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        todos: action.payload,\n      };\n\n    case TodosActionTypes.FETCH_TODOS_ERROR:\n    case TodosActionTypes.TOGGLE_STATUS_TODO_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case TodosActionTypes.SELECT_USER:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    case TodosActionTypes.DESELECT_USER:\n      return {\n        ...state,\n        selectedUserId: null,\n      };\n\n    case TodosActionTypes.SET_STATUS_TODOS:\n      return {\n        ...state,\n        statusTodos: action.payload,\n      };\n\n    case TodosActionTypes.TOGGLE_STATUS_TODO_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        todos: state.todos.map(todo => {\n          if (todo.id === action.payload.id) {\n            return action.payload;\n          }\n\n          return todo;\n        }),\n      };\n\n    default:\n      return state;\n  }\n};\n","export enum UserActionTypes {\n  FETCH_USER = 'FETCH_USER',\n  FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS',\n  FETCH_USER_ERROR = 'FETCH_USER_ERROR',\n  RESET_USER = 'RESET_USER',\n}\n\ninterface FetchUserAction {\n  type: UserActionTypes.FETCH_USER;\n}\n\ninterface FetchUserSuccessAction {\n  type: UserActionTypes.FETCH_USER_SUCCESS;\n  payload: User;\n}\n\ninterface FetchUserErrorAction {\n  type: UserActionTypes.FETCH_USER_ERROR;\n  payload: string;\n}\n\ninterface ResetUserAction {\n  type: UserActionTypes.RESET_USER;\n}\n\nexport interface UserState {\n  user: User | null;\n  loading: boolean;\n  error: null | string;\n}\n\nexport type UserAction =\n  FetchUserAction\n  | FetchUserSuccessAction\n  | FetchUserErrorAction\n  | ResetUserAction;\n","import { UserState, UserAction, UserActionTypes } from './types';\n\nconst initialState: UserState = {\n  user: null,\n  loading: false,\n  error: null,\n};\n\nexport const userReducer = (state = initialState, action: UserAction): UserState => {\n  switch (action.type) {\n    case UserActionTypes.FETCH_USER:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case UserActionTypes.FETCH_USER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n      };\n\n    case UserActionTypes.FETCH_USER_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case UserActionTypes.RESET_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\n\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\nimport { useActions } from '../../hooks/useActions';\nimport './TodoList.scss';\nimport { TodosActionTypes } from '../../store/reducers/TodosReducer/types';\n\nenum SortBy {\n  true = 'true',\n  false = 'false',\n  default = '',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const { fetchTodos, toggleStatusTodo } = useActions();\n\n  const {\n    todos,\n    error,\n    loading,\n    selectedUserId,\n    statusTodos,\n  } = useTypedSelector(state => state.todos);\n\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    fetchTodos(statusTodos);\n  }, [statusTodos]);\n\n  const getFilteredTodos = (todosToFilter: Todo[], queryForFilter: string): Todo[] => {\n    return todosToFilter.filter(todo => {\n      const lowerCaseQuery = queryForFilter.toLowerCase();\n\n      return todo.title.toLowerCase().includes(lowerCaseQuery);\n    });\n  };\n\n  const shuffle = (array: Todo[]): Todo[] => {\n    const copy = [...array];\n\n    for (let i = copy.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [copy[i], copy[j]] = [copy[j], copy[i]];\n    }\n\n    return copy;\n  };\n\n  const filteredTodos = getFilteredTodos(todos, query);\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n\n  if (error) {\n    return <h1>{error}</h1>;\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__interactive\">\n        <label htmlFor=\"search-query\" className=\"label\">\n          Search todo&nbsp;\n          <input\n            className=\"TodoList__interactive-input\"\n            type=\"text\"\n            id=\"search-query\"\n            placeholder=\"Type search todo\"\n            value={query}\n            onChange={event => setQuery(event.target.value)}\n          />\n        </label>\n        <label htmlFor=\"select-completed\">\n          Toggle completion status&nbsp;\n          <select\n            className=\"TodoList__interactive-input\"\n            id=\"select-completed\"\n            value={statusTodos}\n            onChange={(event) => dispatch({\n              type: TodosActionTypes.SET_STATUS_TODOS,\n              payload: event.target.value,\n            })}\n          >\n            <option value={SortBy.default}>All</option>\n            <option value={SortBy.true}>Completed</option>\n            <option value={SortBy.false}>Active</option>\n\n          </select>\n        </label>\n        <span>\n          Random todos&nbsp;\n          <button\n            className=\"button TodoList__user-button TodoList__user-button--selected\"\n            type=\"button\"\n            onClick={() => dispatch({\n              type: TodosActionTypes.FETCH_TODOS_SUCCESS,\n              payload: shuffle(todos),\n            })}\n          >\n            Randomize\n          </button>\n        </span>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed })}\n            >\n              <label htmlFor=\"checkbox\">\n                <input\n                  id=\"checkbox\"\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  readOnly\n                  onChange={() => toggleStatusTodo(todo.id, todo.completed)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                onClick={() => {\n                  if (todo.userId !== selectedUserId) {\n                    dispatch({ type: TodosActionTypes.SELECT_USER, payload: todo.userId });\n                  }\n                }}\n                className={classNames('button TodoList__user-button',\n                  { 'TodoList__user-button--selected': todo.userId === selectedUserId })}\n                type=\"button\"\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { combineReducers } from 'redux';\nimport { todosReducer } from './TodosReducer';\nimport { userReducer } from './UserReducer';\n\nexport const rootReducer = combineReducers({\n  user: userReducer,\n  todos: todosReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","const API_URL = 'https://mate.academy/students-api/';\n\nexport const getTodos = async (complete = ''): Promise<Todo[]> => {\n  let url = `${API_URL}todos`;\n\n  if (complete !== '') {\n    url += `?completed=${complete}`;\n  }\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getUser = async (userId = 0): Promise<User> => {\n  let url = `${API_URL}users/`;\n\n  if (userId !== 0) {\n    url += `${userId}`;\n  }\n\n  const response = await fetch(url);\n\n  if (response.status === 404) {\n    throw new Error();\n  }\n\n  return response.json();\n};\n\nexport const toggleTodo = async (id: number, status: boolean): Promise<Todo> => {\n  const url = `${API_URL}todos/${id}`;\n\n  const response = await fetch(url, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({ completed: !status }),\n  });\n\n  if (response.status === 404) {\n    throw new Error();\n  }\n\n  return response.json();\n};\n","import { Dispatch } from 'redux';\nimport { getUser } from '../../api';\n\nimport { UserActionTypes, UserAction } from '../reducers/UserReducer/types';\n\nexport const fetchUser = (id: number) => {\n  return async (dispatch: Dispatch<UserAction>) => {\n    try {\n      dispatch({ type: UserActionTypes.FETCH_USER });\n      const response = await getUser(id);\n\n      dispatch({ type: UserActionTypes.FETCH_USER_SUCCESS, payload: response });\n    } catch (error) {\n      dispatch({ type: UserActionTypes.FETCH_USER_ERROR, payload: 'Error fetching user' });\n    }\n  };\n};\n","import { Dispatch } from 'redux';\nimport { getTodos, toggleTodo } from '../../api';\n\nimport { TodosActionTypes, TodosAction } from '../reducers/TodosReducer/types';\n\nexport const fetchTodos = (complete = '') => {\n  return async (dispatch: Dispatch<TodosAction>) => {\n    try {\n      dispatch({ type: TodosActionTypes.FETCH_TODOS });\n      const response = await getTodos(complete);\n\n      dispatch({ type: TodosActionTypes.FETCH_TODOS_SUCCESS, payload: response });\n    } catch (error) {\n      dispatch({ type: TodosActionTypes.FETCH_TODOS_ERROR, payload: 'Error fetching todos' });\n    }\n  };\n};\n\nexport const toggleStatusTodo = (id: number, status: boolean) => {\n  return async (dispatch: Dispatch<TodosAction>) => {\n    try {\n      dispatch({ type: TodosActionTypes.TOGGLE_STATUS_TODO });\n      const response = await toggleTodo(id, status);\n\n      dispatch({ type: TodosActionTypes.TOGGLE_STATUS_TODO_SUCCESS, payload: response });\n    } catch (error) {\n      dispatch({ type: TodosActionTypes.TOGGLE_STATUS_TODO_ERROR, payload: 'Error toggling todo' });\n    }\n  };\n};\n","import * as UserActionCreators from './user';\nimport * as TodosActionCreators from './todo';\n\nexport default {\n  ...TodosActionCreators,\n  ...UserActionCreators,\n};\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ActionCreators from '../store/action-creators';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(ActionCreators, dispatch);\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\nimport { TodosActionTypes } from '../../store/reducers/TodosReducer/types';\nimport { useActions } from '../../hooks/useActions';\n\nimport './CurrentUser.scss';\nimport { UserActionTypes } from '../../store/reducers/UserReducer/types';\n\nexport const CurrentUser: React.FC = () => {\n  const { selectedUserId } = useTypedSelector(state => state.todos);\n  const { user, loading, error } = useTypedSelector(state => state.user);\n  const dispatch = useDispatch();\n  const { fetchUser } = useActions();\n\n  useEffect(() => {\n    if (selectedUserId) {\n      fetchUser(selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  const clearUser = () => {\n    dispatch({ type: TodosActionTypes.DESELECT_USER });\n    dispatch({ type: UserActionTypes.RESET_USER });\n  };\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n\n  if (error) {\n    return <h1>{error}</h1>;\n  }\n\n  if (user === null) {\n    return <span>No user selected</span>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <button\n        onClick={clearUser}\n        className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n        \"\n        type=\"button\"\n      >\n        Clear\n      </button>\n\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {' '}\n          {user.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.website}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","// import React from 'react';\n// import { useSelector } from 'react-redux';\n\nimport './styles/general.scss';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}